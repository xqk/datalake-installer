#!/bin/bash
action=$1
target=$2
args=$@

DE_BASE=/opt

source ${DE_BASE}/datalake/.env

export COMPOSE_HTTP_TIMEOUT=180

compose_files="-f docker-compose.yml"

if [ "${DE_ENGINE_MODE}" = "local" ]; then
   if [[ ! ${DE_EXTERNAL_KETTLE} ]] || [ ${DE_EXTERNAL_KETTLE} = "false" ]; then
     compose_files="${compose_files} -f docker-compose-kettle.yml"
   fi

   if [[ ! ${DE_EXTERNAL_DORIS} ]] || [ ${DE_EXTERNAL_DORIS} = "false" ]; then
     compose_files="${compose_files} -f docker-compose-doris.yml"
   fi
fi

if [[ ! ${DE_EXTERNAL_MYSQL} ]] || [ ${DE_EXTERNAL_MYSQL} = "false" ]; then
  compose_files="${compose_files} -f docker-compose-mysql.yml"
fi

function usage() {
   echo "DataLake 控制脚本"
   echo
   echo "Usage: "
   echo "  ./dectl [COMMAND] [ARGS...]"
   echo "  ./dectl --help"
   echo
   echo "Commands: "
   echo "  status    查看 DataLake 服务运行状态"
   echo "  start     启动 DataLake 服务"
   echo "  stop      停止 DataLake 服务"
   echo "  restart   重启 DataLake 服务"
   echo "  reload    重新加载 DataLake 服务"
   echo "  uninstall 卸载 DataLake 服务"
   echo "  upgrade   升级 DataLake 服务"
   echo "  version   查看 DataLake 版本信息"
}

function status() {
   echo
   cd ${DE_BASE}/datalake; docker-compose ${compose_files} ps
}
function start() {
   echo
   cd ${DE_BASE}/datalake; docker-compose ${compose_files} start ${target}
}
function stop() {
   echo
   cd ${DE_BASE}/datalake; docker-compose ${compose_files} stop ${target}
}
function restart() {
   echo
   cd ${DE_BASE}/datalake; docker-compose ${compose_files} restart ${target}
}
function reload() {
   echo
   cd ${DE_BASE}/datalake; docker-compose ${compose_files} up -d
}
function uninstall() {
   echo
   cd ${DE_BASE}/datalake; docker-compose ${compose_files} down -v ${target}
}
function version() {
   echo
   cat ${DE_BASE}/datalake/conf/version
}
function upgrade() {
   echo
   latest_version=`curl -s https://api.github.com/repos/datalake/datalake/releases/latest | grep -e "\"tag_name\"" | sed -r 's/.*: "(.*)",/\1/'`
   current_version=$(cat ${DE_BASE}/datalake/conf/version)

   if [ "${latest_version}" = "" ];then
      echo "未获取到最新版本"
      exit 1
   elif [ "${latest_version}" = "${current_version}" ];then
      echo "最新版本与当前版本一致,退出升级过程"
      exit 0
   else
      echo -e "\e[32m 检测到GitHub上最新版本为\e[1;33m${latest_version}\e[0;32m 即将执行在线升级...\e[0m"
   fi
   sleep 2s

   git_urls=('github.com' 'hub.fastgit.org')

   for git_url in ${git_urls[*]}
   do
      success="true"
      for i in {1..3}
      do
         echo -ne "检测 ${git_url} ... ${i} "
          curl -m 5 -kIs https://${git_url} >/dev/null
         if [ $? != 0 ];then
            echo "failed"
            success="false"
            break
         else
            echo "ok"
         fi
      done
      if [ ${success} == "true" ];then
         server_url=${git_url}
         break
      fi
   done

   if [ "x${server_url}" == "x" ];then
       echo "没有找到稳定的下载服务器，请稍候重试"
       exit 1
   fi

   echo "使用下载服务器 ${server_url}"
   cd /tmp
   curl -LOk -m 60 -o datalake-${latest_version}-online.tar.gz  https://${server_url}/datalake/datalake/releases/download/${latest_version}/datalake-${latest_version}-online.tar.gz
   if [ $? -ne 0 ]; then
      echo -e "\e[31m升级失败:连接下载服务器超时！\n可手动下载升级包，然后执行\e[1;33m /bin/bash install.sh \e[0;31m离线升级，也可以重新执行一次 dectl upgrade 命令。\e[0m"
      return 2
   fi

   if [ ! -f datalake-${latest_version}-online.tar.gz ];then
      echo "下载在线安装包失败，请试试重新执行一次安装命令。"
      exit 1
   fi

   tar zxvf datalake-${latest_version}-online.tar.gz
   if [ $? != 0 ];then
      echo "下载在线安装包失败，请试试重新执行一次安装命令。"
      rm -f datalake-${latest_version}-online.tar.gz
      exit 1
   fi

   cd datalake-${latest_version}-online
   /bin/bash install.sh
   cd ..
   rm -rf /tmp/datalake-${latest_version}-online
}

function main() {
    case "${action}" in
      status)
         status
         ;;
      start)
         start
         ;;
      stop)
         stop
         ;;
      restart)
         restart
         ;;
      reload)
         reload
         ;;
      uninstall)
         uninstall
         ;;
      upgrade)
         upgrade
         ;;
      version)
         version
         ;;
      help)
         usage
         ;;
      --help)
         usage
         ;;
      *)
         echo "不支持的参数，请使用 help 或 --help 参数获取帮助"
    esac
}
main